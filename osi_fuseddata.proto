syntax = "proto2";

option optimize_for = SPEED;

import "osi_version.proto";
import "osi_common.proto";
import "osi_featuredata.proto";

package osi3;

//
// \brief Interface for fused sensor data containing information from multiple sensors and sensor types.
//
// All information is given with respect to the host vehicle frame (i.e. center of rear axis of the ego car).
//
message FusedData
{
    // The interface version used by the sender (i.e. the simulation
    // environment).
    //
    optional InterfaceVersion version = 1;

    // Fused detections from multiple sensors and sensor types (sensor fusion).
    //
    //
    repeated FusedDetectionData fused_detection_data = 2;
}

//
// \brief The header attributes of the list of fused detections.
//
message FusedDetectionHeader
{
    // Time stamp at which the fusion was done in the global synchronized time.
    //
    // \note See \c SensorData::timestamp and
    // \c SensorData::last_measurement_time for detailed discussions on the
    // semantics of time-related fields.
    //
    optional Timestamp fusion_time = 1;

    // Data Qualifier expresses to what extent the content of this event can be
    // relied on.
    //
    optional DataQualifier data_qualifier = 2;

    // The current number of valid detections in the detections list.
    //
    // \note This value has to be set if the list contains invalid detections.
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // \endrules
    //
    optional uint32 number_of_valid_detections = 3;

    // The IDs of the sensors that have been fused and result in the listed detections.
    //
    repeated Identifier sensor_id = 4;

    // Data qualifier communicates the overall availability of the
    // interface.
    //
    enum DataQualifier
    {
        // Unknown (must not be used in ground truth).
        //
        DATA_QUALIFIER_UNKNOWN = 0;

        // Other (unspecified but known).
        //
        DATA_QUALIFIER_OTHER = 1;

        // Data is available.
        //
        DATA_QUALIFIER_AVAILABLE = 2;

        // Reduced data is available.
        //
        DATA_QUALIFIER_AVAILABLE_REDUCED = 3;

        // Data is not available.
        //
        DATA_QUALIFIER_NOT_AVAILABLE = 4;

        // Sensor is blind.
        //
        DATA_QUALIFIER_BLINDNESS = 5;

        // Sensor temporary available.
        //
        DATA_QUALIFIER_TEMPORARY_AVAILABLE = 6;

        // Sensor invalid.
        //
        DATA_QUALIFIER_INVALID = 7;
    }
}

//
// \brief Data from one radar sensor including a list of detections.
//
message FusedDetectionData
{
    // Header attributes of fused detections from multiple sensors and sensor types.
    //
    optional FusedDetectionHeader header = 1;

    // List of fused detections.
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated FusedDetection detection = 2;
}

//
// \brief A fused detection that could be based on multiple sensors and sensor types.
//
message FusedDetection
{
    // Existence probability of the detection
    //
    // \note Use as confidence measure where a low value means less confidence
    // and a high value indicates strong confidence.
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // is_less_than_or_equal_to: 1
    // \endrules
    //
    optional double existence_probability = 1;

    // ID of the detected object this detection is associated to.
    //
    // \note ID = MAX(uint64) indicates no reference to an object.
    //
    // \rules
    // refers_to: DetectedObject
    // \endrules
    //
    optional Identifier object_id = 2;

    // Measured position of the detection given in cartesian coordinates in the
    // host vehicle coordinate system.
    //
    // Unit: m
    //
    optional Vector3d position = 3;

    // Root mean squared error of the measured position of the detection.
    //
    optional Vector3d position_rmse = 4;

    // Velocity of the detection given in cartesian coordinates in the
    // host vehicle coordinate system.
    //
    // Unit: m/s
    //
    optional Vector3d velocity = 5;

    // Root mean squared error of the detection's velocity.
    //
    // Unit: m/s
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // \endrules
    //
    optional Vector3d velocity_rmse = 6;

    // Intensity or equivalent value of the detection's echo.
    //
    // Unit: %
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // is_less_than_or_equal_to: 100
    // \endrules
    //
    optional double intensity = 7;

    // The signal to noise ratio (SNR) of the detection.
    //
    // Unit: dB
    //
    optional double snr = 8;

    // Describes the possibility whether more than one object may have led to
    // this detection.
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // is_less_than_or_equal_to: 1
    // \endrules
    //
    optional double point_target_probability = 9;

    // The IDs of the sensors that have been fused to the single detection.
    //
    // \note one detection can originate from multiple sensors.
    //
    repeated Identifier sensor_id = 10;

    // Basic classification of the detection.
    //
    optional DetectionClassification classification = 11;
}
